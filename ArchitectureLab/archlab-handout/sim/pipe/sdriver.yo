                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | # Loop header
0x032: 6300                 |     xorq 	%rax,%rax
0x034: c0f2f8ffffffffffffff | 	iaddq 	$-8, %rdx
0x03e: 72b601000000000000   | 	jl 		Root		# len < 8
                            | 	
0x047:                      | Loop1:
                            | 
0x047: 50870000000000000000 | 	mrmovq 	(%rdi), %r8
0x051: 50970800000000000000 | 	mrmovq 	8(%rdi), %r9
0x05b: 6288                 | 	andq 	%r8, %r8
0x05d: 40860000000000000000 | 	rmmovq 	%r8, (%rsi)
0x067: 40960800000000000000 | 	rmmovq 	%r9, 8(%rsi)
0x071: 718400000000000000   | 	jle 	Loop2
0x07a: c0f00100000000000000 | 	iaddq 	$1, %rax
0x084:                      | Loop2:
0x084: 6299                 | 	andq 	%r9, %r9
0x086: 719900000000000000   | 	jle 	Loop3
0x08f: c0f00100000000000000 | 	iaddq 	$1, %rax
0x099:                      | Loop3:
0x099: 50871000000000000000 | 	mrmovq 	16(%rdi), %r8
0x0a3: 50971800000000000000 | 	mrmovq 	24(%rdi), %r9	
0x0ad: 6288                 | 	andq 	%r8, %r8
0x0af: 40861000000000000000 | 	rmmovq 	%r8, 16(%rsi)
0x0b9: 40961800000000000000 | 	rmmovq 	%r9, 24(%rsi)	
0x0c3: 71d600000000000000   | 	jle 	Loop4
0x0cc: c0f00100000000000000 | 	iaddq 	$1, %rax
0x0d6:                      | Loop4:
0x0d6: 6299                 | 	andq 	%r9, %r9
0x0d8: 71eb00000000000000   | 	jle 	Loop5
0x0e1: c0f00100000000000000 | 	iaddq 	$1, %rax
0x0eb:                      | Loop5:
0x0eb: 50872000000000000000 | 	mrmovq 	32(%rdi), %r8
0x0f5: 50972800000000000000 | 	mrmovq 	40(%rdi), %r9
0x0ff: 6288                 | 	andq 	%r8, %r8
0x101: 40862000000000000000 | 	rmmovq 	%r8, 32(%rsi)
0x10b: 40962800000000000000 | 	rmmovq 	%r9, 40(%rsi)	
0x115: 712801000000000000   | 	jle 	Loop6
0x11e: c0f00100000000000000 | 	iaddq 	$1, %rax
0x128:                      | Loop6:
0x128: 6299                 | 	andq 	%r9, %r9
0x12a: 713d01000000000000   | 	jle 	Loop7
0x133: c0f00100000000000000 | 	iaddq 	$1, %rax
0x13d:                      | Loop7:
0x13d: 50873000000000000000 | 	mrmovq 	48(%rdi), %r8
0x147: 50973800000000000000 | 	mrmovq 	56(%rdi), %r9
0x151: 6288                 | 	andq 	%r8, %r8
0x153: 40863000000000000000 | 	rmmovq 	%r8, 48(%rsi)
0x15d: 40963800000000000000 | 	rmmovq 	%r9, 56(%rsi)	
0x167: 717a01000000000000   | 	jle 	Loop8
0x170: c0f00100000000000000 | 	iaddq 	$1, %rax
0x17a:                      | Loop8:
0x17a: 6299                 | 	andq 	%r9, %r9
0x17c: 718f01000000000000   | 	jle 	Update
0x185: c0f00100000000000000 | 	iaddq 	$1, %rax
                            | 
0x18f:                      | Update:
0x18f: c0f74000000000000000 | 	iaddq 	$64, %rdi
0x199: c0f64000000000000000 | 	iaddq 	$64, %rsi
                            | 
0x1a3:                      | Test1:
0x1a3: c0f2f8ffffffffffffff | 	iaddq 	$-8, %rdx	# len - 8
0x1ad: 754700000000000000   | 	jge		Loop1		
                            | 
                            | 
                            | # len in [0, 1, ..., 7]
0x1b6:                      | Root:
0x1b6: c0f20400000000000000 | 	iaddq	$4, %rdx
0x1c0: 72db01000000000000   | 	jl		Left		# len < 4
0x1c9: 762702000000000000   | 	jg 		Right		# len > 4	
0x1d2: 73db02000000000000   | 	je 		R4			# len = 4
                            | 
                            | # len in [0, 1, 2, 3]
0x1db:                      | Left:
0x1db: c0f20100000000000000 | 	iaddq 	$1, %rdx
0x1e5: 730403000000000000   | 	je		R3			# len = 3
0x1ee: c0f20100000000000000 | 	iaddq	$1, %rdx	
0x1f8: 732d03000000000000   | 	je		R2			# len = 2
0x201: c0f20100000000000000 | 	iaddq	$1, %rdx
0x20b: 735603000000000000   | 	je 		R1			# len = 1
0x214: c0f20100000000000000 | 	iaddq	$1, %rdx
0x21e: 737f03000000000000   | 	je		Done
                            | 
                            | 
                            | # len in [5, 6, 7]
0x227:                      | Right:
0x227: c0f2ffffffffffffffff | 	iaddq 	$-1, %rdx
0x231: 73b202000000000000   | 	je		R5			# len = 5
0x23a: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx
0x244: 738902000000000000   | 	je		R6			# len = 6
0x24d: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx
0x257: 736002000000000000   | 	je 		R7			# len = 7
                            | 
0x260:                      | R7:
0x260: 50873000000000000000 | 	mrmovq	48(%rdi), %r8
0x26a: 6288                 | 	andq 	%r8, %r8
0x26c: 40863000000000000000 | 	rmmovq	%r8, 48(%rsi)
0x276: 718902000000000000   | 	jle		R6
0x27f: c0f00100000000000000 | 	iaddq 	$1, %rax
0x289:                      | R6:
0x289: 50872800000000000000 | 	mrmovq	40(%rdi), %r8
0x293: 6288                 | 	andq 	%r8, %r8
0x295: 40862800000000000000 | 	rmmovq	%r8, 40(%rsi)
0x29f: 71b202000000000000   | 	jle		R5
0x2a8: c0f00100000000000000 | 	iaddq 	$1, %rax
0x2b2:                      | R5:
0x2b2: 50872000000000000000 | 	mrmovq	32(%rdi), %r8
0x2bc: 6288                 | 	andq 	%r8, %r8
0x2be: 40862000000000000000 | 	rmmovq	%r8, 32(%rsi)
0x2c8: 71db02000000000000   | 	jle		R4
0x2d1: c0f00100000000000000 | 	iaddq 	$1, %rax
0x2db:                      | R4:
0x2db: 50871800000000000000 | 	mrmovq	24(%rdi), %r8
0x2e5: 6288                 | 	andq 	%r8, %r8
0x2e7: 40861800000000000000 | 	rmmovq	%r8, 24(%rsi)
0x2f1: 710403000000000000   | 	jle		R3
0x2fa: c0f00100000000000000 | 	iaddq 	$1, %rax
0x304:                      | R3:
0x304: 50871000000000000000 | 	mrmovq	16(%rdi), %r8
0x30e: 6288                 | 	andq 	%r8, %r8
0x310: 40861000000000000000 | 	rmmovq	%r8, 16(%rsi)
0x31a: 712d03000000000000   | 	jle		R2
0x323: c0f00100000000000000 | 	iaddq 	$1, %rax
0x32d:                      | R2:
0x32d: 50870800000000000000 | 	mrmovq	8(%rdi), %r8
0x337: 6288                 | 	andq 	%r8, %r8
0x339: 40860800000000000000 | 	rmmovq	%r8, 8(%rsi)
0x343: 715603000000000000   | 	jle		R1
0x34c: c0f00100000000000000 | 	iaddq 	$1, %rax
0x356:                      | R1:
0x356: 50870000000000000000 | 	mrmovq	(%rdi), %r8
0x360: 6288                 | 	andq 	%r8, %r8
0x362: 40860000000000000000 | 	rmmovq	%r8, (%rsi)
0x36c: 717f03000000000000   | 	jle		Done
0x375: c0f00100000000000000 | 	iaddq 	$1, %rax
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x37f:                      | Done:
0x37f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x380:                      | End:
                            | #/* $end ncopy-ys */
0x380:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x380:                      | 	.align 8
0x380:                      | src:
0x380: ffffffffffffffff     | 	.quad -1
0x388: 0200000000000000     | 	.quad 2
0x390: fdffffffffffffff     | 	.quad -3
0x398: 0400000000000000     | 	.quad 4
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8:                      | Postdest:
0x3d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3e0:                      | .align 8
                            | # Run time stack
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
                            | 
0x460:                      | Stack:
