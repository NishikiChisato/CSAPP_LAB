#######################################################################
# Test for copying block of size 9;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $9, %rdx		# src and dst have 9 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion

# Loop header
    xorq 	%rax,%rax
	iaddq 	$-8, %rdx
	jl 		Root		# len < 8
	
Loop1:

	mrmovq 	(%rdi), %r8
	mrmovq 	8(%rdi), %r9
	andq 	%r8, %r8
	rmmovq 	%r8, (%rsi)
	rmmovq 	%r9, 8(%rsi)
	jle 	Loop2
	iaddq 	$1, %rax
Loop2:
	andq 	%r9, %r9
	jle 	Loop3
	iaddq 	$1, %rax
Loop3:
	mrmovq 	16(%rdi), %r8
	mrmovq 	24(%rdi), %r9	
	andq 	%r8, %r8
	rmmovq 	%r8, 16(%rsi)
	rmmovq 	%r9, 24(%rsi)	
	jle 	Loop4
	iaddq 	$1, %rax
Loop4:
	andq 	%r9, %r9
	jle 	Loop5
	iaddq 	$1, %rax
Loop5:
	mrmovq 	32(%rdi), %r8
	mrmovq 	40(%rdi), %r9
	andq 	%r8, %r8
	rmmovq 	%r8, 32(%rsi)
	rmmovq 	%r9, 40(%rsi)	
	jle 	Loop6
	iaddq 	$1, %rax
Loop6:
	andq 	%r9, %r9
	jle 	Loop7
	iaddq 	$1, %rax
Loop7:
	mrmovq 	48(%rdi), %r8
	mrmovq 	56(%rdi), %r9
	andq 	%r8, %r8
	rmmovq 	%r8, 48(%rsi)
	rmmovq 	%r9, 56(%rsi)	
	jle 	Update
	iaddq 	$1, %rax


Update:
	iaddq 	$64, %rdi
	iaddq 	$64, %rsi

Test1:
	iaddq 	$-8, %rdx	# len - 8
	jge		Loop1		

# len in [0, 1, ..., 7]

Root:
	iaddq	$4, %rdx
	jl		Left		# len < 4
	jg 		Right		# len > 4	
	je 		R4			# len = 4

# len in [0, 1, 2, 3]
Left:
	iaddq 	$1, %rdx
	je		R3			# len = 3
	iaddq	$1, %rdx	
	je		R2			# len = 2
	iaddq	$1, %rdx
	je 		R1			# len = 1
	iaddq	$1, %rdx
	je		Done


# len in [5, 6, 7]
Right:
	iaddq 	$-1, %rdx
	je		R5			# len = 5
	iaddq	$-1, %rdx
	je		R6			# len = 6
	iaddq	$-1, %rdx
	je 		R7			# len = 7

R7:
	mrmovq	48(%rdi), %r8
	andq 	%r8, %r8
	rmmovq	%r8, 48(%rsi)
R6:
	mrmovq 	40(%rdi), %r8
	jle 	R61
	iaddq	$1, %rax
R61:
	rmmovq	%r8, 40(%rsi)
	andq 	%r8, %r8
R5:
	mrmovq	32(%rdi), %r8
	jle 	R51
	iaddq	$1, %rax
R51:
	rmmovq	%r8, 32(%rsi)
	andq	%r8, %r8
R4:
	mrmovq	24(%rdi), %r8
	jle 	R41
	iaddq	$1, %rax
R41:
	rmmovq	%r8, 24(%rsi)
	andq	%r8, %r8
R3:
	mrmovq	16(%rdi), %r8
	jle 	R31
	iaddq	$1, %rax
R31:
	rmmovq	%r8, 16(%rsi)
	andq	%r8, %r8
R2:
	mrmovq	8(%rdi), %r8
	jle 	R21
	iaddq	$1, %rax
R21:
	rmmovq	%r8, 8(%rsi)
	andq	%r8, %r8
R1:
	mrmovq 	(%rdi), %r8
	jle 	R11
	iaddq	$1, %rax
R11:
	rmmovq 	%r8, (%rsi)
	andq 	%r8, %r8
	jle 	Done
	iaddq	$1, %rax



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 4.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $4,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $9,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad -4
	.quad 5
	.quad -6
	.quad 7
	.quad 8
	.quad -9
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
