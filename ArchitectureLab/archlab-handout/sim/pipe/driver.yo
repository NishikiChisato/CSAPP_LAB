                            | #######################################################################
                            | # Test for copying block of size 2;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20200000000000000 | 	irmovq $2, %rdx		# src and dst have 2 elements
0x014: 30f6b802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 802f01000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | # Loop header
0x03b: 6300                 |     xorq 	%rax,%rax      
0x03d: 63dd                 |     xorq 	%r13, %r13	# i = 0
0x03f: 202e                 | 	rrmovq 	%rdx, %r14
0x041: c0feffffffffffffffff | 	iaddq 	$-1, %r14	# limit
0x04b: 70c400000000000000   | 	jmp 	Test1
0x054:                      | Loop1:
0x054: 50870000000000000000 | 	mrmovq 	(%rdi), %r8
0x05e: 6288                 | 	andq 	%r8, %r8
0x060: 40860000000000000000 | 	rmmovq 	%r8, (%rsi)
0x06a: 717d00000000000000   | 	jle 	Loop2
0x073: c0f00100000000000000 | 	iaddq 	$1, %rax
0x07d:                      | Loop2:
0x07d: 50970800000000000000 | 	mrmovq 	8(%rdi), %r9
0x087: 6299                 | 	andq 	%r9, %r9
0x089: 40860800000000000000 | 	rmmovq 	%r8, 8(%rsi)
0x093: 71a600000000000000   | 	jle 	Update
0x09c: c0f00100000000000000 | 	iaddq 	$1, %rax
0x0a6:                      | Update:
                            | 
0x0a6: c0f71000000000000000 | 	iaddq 	$16, %rdi
0x0b0: c0f61000000000000000 | 	iaddq 	$16, %rsi
0x0ba: c0fd0200000000000000 | 	iaddq 	$2, %r13
                            | 
0x0c4:                      | Test1:
0x0c4: 61ed                 | 	subq 	%r14, %r13
0x0c6: 725400000000000000   | 	jl 		Loop1
0x0cf: 60ed                 | 	addq 	%r14, %r13
                            | 
0x0d1: 702301000000000000   | 	jmp 	Test2
                            | 
0x0da:                      | Last1:
0x0da: 60d0                 | 	addq 	%r13, %rax
                            | 
0x0dc: 50870000000000000000 | 	mrmovq 	(%rdi), %r8
0x0e6: 6288                 | 	andq 	%r8, %r8
0x0e8: 40860000000000000000 | 	rmmovq 	%r8, (%rsi)
0x0f2: 710501000000000000   | 	jle 	Last2
0x0fb: c0f00100000000000000 | 	iaddq 	$1, %rax
0x105:                      | Last2:
0x105: c0f70800000000000000 | 	iaddq 	$8, %rdi
0x10f: c0f60800000000000000 | 	iaddq 	$8, %rsi
0x119: c0fd0100000000000000 | 	iaddq 	$1, %r13
                            | 
0x123:                      | Test2:
0x123: 61d2                 | 	subq 	%r13, %rdx
0x125: 76da00000000000000   | 	jg 		Last1
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x12e:                      | Done:
0x12e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x12f:                      | End:
                            | #/* $end ncopy-ys */
0x12f:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x12f:                      | check:
                            | 	# Return value test
0x12f: 30fa0000000000000000 | 	irmovq $0,%r10
0x139: 61a0                 | 	subq %r10,%rax
0x13b: 735701000000000000   | 	je checkb
0x144: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x14e: 709502000000000000   | 	jmp cdone
0x157:                      | checkb:
                            | 	# Code length check
0x157: 30f02f01000000000000 | 	irmovq EndFun,%rax
0x161: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x16b: 6120                 | 	subq %rdx,%rax
0x16d: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x177: 6102                 | 	subq %rax,%rdx
0x179: 759501000000000000   | 	jge checkm
0x182: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x18c: 709502000000000000   | 	jmp cdone
0x195:                      | checkm:
0x195: 30f2b802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x19f: 30f39802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x1a9: 30f70200000000000000 | 	irmovq $2,%rdi  # Count
0x1b3: 6277                 | 	andq %rdi,%rdi
0x1b5: 731302000000000000   | 	je checkpre         # Skip check if count = 0
0x1be:                      | mcloop:
0x1be: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x1c8: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1d2: 6160                 | 	subq %rsi,%rax
0x1d4: 73f001000000000000   | 	je  mok
0x1dd: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1e7: 709502000000000000   | 	jmp cdone
0x1f0:                      | mok:
0x1f0: 30f00800000000000000 | 	irmovq $8,%rax
0x1fa: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1fc: 6003                 | 	addq %rax,%rbx    # src++
0x1fe: 30f00100000000000000 | 	irmovq $1,%rax
0x208: 6107                 | 	subq %rax,%rdi    # cnt--
0x20a: 76be01000000000000   | 	jg mcloop
0x213:                      | checkpre:
                            | 	# Check for corruption
0x213: 30f2b002000000000000 | 	irmovq Predest,%rdx
0x21d: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x227: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x231: 6120                 | 	subq %rdx,%rax
0x233: 734f02000000000000   | 	je checkpost
0x23c: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x246: 709502000000000000   | 	jmp cdone
0x24f:                      | checkpost:
                            | 	# Check for corruption
0x24f: 30f2c802000000000000 | 	irmovq Postdest,%rdx
0x259: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x263: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x26d: 6120                 | 	subq %rdx,%rax
0x26f: 738b02000000000000   | 	je checkok
0x278: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x282: 709502000000000000   | 	jmp cdone
0x28b:                      | checkok:
                            | 	# Successful checks
0x28b: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x295:                      | cdone:
0x295: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x298:                      | 	.align 8
0x298:                      | src:
0x298: ffffffffffffffff     | 	.quad -1
0x2a0: feffffffffffffff     | 	.quad -2
0x2a8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2b0:                      | 	.align 16
0x2b0:                      | Predest:
0x2b0: fadebc0000000000     | 	.quad 0xbcdefa
0x2b8:                      | dest:
0x2b8: abefcd0000000000     | 	.quad 0xcdefab
0x2c0: abefcd0000000000     | 	.quad 0xcdefab
0x2c8:                      | Postdest:
0x2c8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2d0:                      | .align 8
                            | # Run time stack
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
                            | 
0x350:                      | Stack:
